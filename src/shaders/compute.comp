#version 450
#extension GL_ARB_separate_shader_objects : enable

#define ORIENTATION_CULLING true
#define VIEW_FRUSTRUM_CULLING true
#define DISTANCE_CULLING true

#define VIEW_FRUSTRUM_CULLING_TOLERANCE 1.0
#define DISTANCE_CULLING_N_BUCKETS 16
#define DISTANCE_CULLING_MAX 32

#define WIND_INTENSITY 1.0

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (idx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // DONE: Apply forces on every blade and update the vertices in the buffer
    Blade blade = blades[idx];
    vec3 v0 = blade.v0.xyz;       // Position
    vec3 v1 = blade.v1.xyz;       // Bezier point
    vec3 v2 = blade.v2.xyz;       // Physical model guide
    vec3 up = blade.up.xyz;       // Up vector
    float direction = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness_coeff = blade.up.w;

    // GRAVITY
    vec3 gravity_direction = vec3(0.0, -1.0, 0.0);
    float gravity_magnitude_of_acceleration = 9.81;
    vec3 gE = gravity_direction * gravity_magnitude_of_acceleration;

    vec3 rotation = normalize(vec3(cos(direction), 0.0, sin(direction)));
    vec3 f = normalize(cross(up, rotation));

    vec3 gF = 0.25 * length(gE) * f;

    vec3 gravity = gE + gF;


    // RECOVERY
    vec3 iv2 = v0 + up * height;
    vec3 recovery = (iv2 - v2) * stiffness_coeff;

    // WIND
    vec3 windFunction = vec3(cos(totalTime), 0.0, sin(totalTime));
    float directional_alignment = 1.0 - abs(dot(normalize(windFunction), normalize(v2 - v0)));
    float height_ratio = dot(v2 - v0, up) / height;
    vec3 wind = WIND_INTENSITY * windFunction * directional_alignment * height_ratio;

    // TOTAL FORCE
    vec3 tv2 = (gravity + recovery + wind) * deltaTime;

    v2 += tv2;

    // STATE VALIDATION

    // Ensure a position of v2 above the local plane
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

    // Constrain v1 to always be above v0
    float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1.0 - (l_proj / height), 0.05 * max(l_proj / height, 1.0));

    // Ensure that the length of the Bezier curve is not larger than the height of the blade
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2.0 * L0 + 2.0 * L1) * 0.25; // approximation for the length L of a Bezier curve of degree 3
    float r = height / L;

    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    blade.v1.xyz = v1;
    blade.v2.xyz = v2;

    blades[idx] = blade;


	// DONE: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    if (ORIENTATION_CULLING || VIEW_FRUSTRUM_CULLING || DISTANCE_CULLING) {

        // Taking the inverse of the view matrix transforms from view space back to world space
        // Translation component (position) stored in index 3
        vec3 cam_pos_world = inverse(camera.view)[3].xyz;

        // Viewing Direction: v0 - cam_pos_world
        // Perpendicular Component of the viewing vector along the up axis: up * dot(v0 - cam_pos_world, up)
        // By subtracting the Perpendicular Component from the Viewing Direction, we remove the component along up, leaving only the component that is coplanar with the grass blade
        vec3 cam_view_dir_world_projected = v0 - cam_pos_world - up * dot(v0 - cam_pos_world, up);

        // ORIENTATION CULLING
        if (ORIENTATION_CULLING && abs(dot(normalize(cam_view_dir_world_projected), normalize(cross(up, rotation)))) < cos(radians(80.0))) {
            return;
        }

        // VIEW-FRUSTRUM CULLING
        if (VIEW_FRUSTRUM_CULLING) {
            vec3 mid = 0.25 * v0 * 0.5 * v1 * 0.25 * v2;

            vec4 ndc_v0 = camera.proj * camera.view * vec4(v0, 1.0);
            vec4 ndc_v2 = camera.proj * camera.view * vec4(v2, 1.0);
            vec4 ndc_mid = camera.proj * camera.view * vec4(mid, 1.0);

            float v0_h = ndc_v0.w + VIEW_FRUSTRUM_CULLING_TOLERANCE;
            float v2_h = ndc_v2.w + VIEW_FRUSTRUM_CULLING_TOLERANCE;
            float mid_h = ndc_mid.w + VIEW_FRUSTRUM_CULLING_TOLERANCE;

            if (!inBounds(ndc_v0.x , v0_h ) && !inBounds(ndc_v0.y , v0_h ) && !inBounds(ndc_v0.z , v0_h ) &&
                !inBounds(ndc_v2.x , v2_h ) && !inBounds(ndc_v2.y , v2_h ) && !inBounds(ndc_v2.z , v2_h ) &&
                !inBounds(ndc_mid.x, mid_h) && !inBounds(ndc_mid.y, mid_h) && !inBounds(ndc_mid.z, mid_h)
               ) {
                return;
            }
        }

        // DISTANCE CULLING
        if (DISTANCE_CULLING) {
            float d_proj = length(cam_view_dir_world_projected);
            float d_max = DISTANCE_CULLING_MAX;
            int n = DISTANCE_CULLING_N_BUCKETS;

            if ((idx % n) < int(n * (1.0 - d_proj / d_max))) {
                return;
            }
        }
    }

    uint atomicIdx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[atomicIdx] = blades[idx];
}
